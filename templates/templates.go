// Code generated by go-bindata.
// sources:
// templates/application/application.tmpl
// templates/index.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesApplicationApplicationTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x6b\xc3\x30\x10\x85\xf7\xfc\x8a\x8b\xe6\x08\x91\xad\xc3\x49\x50\xd2\x40\x0b\x85\x76\x68\x69\x3b\x5e\xac\x4b\x24\x90\xa5\xd4\xbe\x38\x84\x90\xff\x5e\x1c\xdb\xe0\x4e\xba\x4f\xef\x3d\x89\x77\xb8\x7c\x7a\xdb\x7c\xfc\xbc\x6f\x21\x48\x9d\xdc\x02\xfb\x03\x12\xe5\x83\x55\x9c\x95\x5b\x00\x60\x60\xf2\xfd\x00\x80\x35\x0b\x41\x15\xa8\x69\x59\xac\x3a\xc9\x5e\x3f\xa8\xb9\x14\x44\x8e\x9a\x7f\x4f\xb1\xb3\xea\x5b\x7f\x3e\xea\x4d\xa9\x8f\x24\x71\x97\x58\x41\x55\xb2\x70\x16\xab\x5e\xb6\x96\xfd\x81\xff\x25\x33\xd5\x6c\x55\x17\xf9\x7c\x2c\x8d\xcc\xcc\xe7\xe8\x25\x58\xcf\x5d\xac\x58\xdf\x61\x05\x31\x47\x89\x94\x74\x5b\x51\x62\xbb\x9e\x1e\x92\x28\x89\xdd\x2b\x1f\x4a\xa2\x16\xcd\x80\x7d\x03\x33\x55\xc0\x5d\xf1\x97\xd1\xdd\xdf\x71\x33\x40\x8f\x6b\x87\x04\xa1\xe1\xbd\x55\x46\xb9\x67\x4e\xa9\xac\xe0\xab\x34\xc9\x2f\xd1\x90\x43\x13\xd6\x63\xd2\xcc\xa3\x58\x53\xcc\xc3\x78\xbd\xc2\x25\x72\xf2\x70\xbb\x8d\xc6\x49\x43\x33\x7c\x8c\xe6\xbe\xe6\xbf\x00\x00\x00\xff\xff\x12\x95\x36\xed\x76\x01\x00\x00")

func templatesApplicationApplicationTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesApplicationApplicationTmpl,
		"templates/application/application.tmpl",
	)
}

func templatesApplicationApplicationTmpl() (*asset, error) {
	bytes, err := templatesApplicationApplicationTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/application/application.tmpl", size: 374, mode: os.FileMode(420), modTime: time.Unix(1508288265, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x29\xb0\xf3\x48\xcd\xc9\xc9\xd7\x51\x08\xcf\x2f\xca\x49\x51\xb4\xd1\x2f\xb0\x03\x04\x00\x00\xff\xff\xbb\x9e\x51\xad\x14\x00\x00\x00")

func templatesIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTmpl,
		"templates/index.tmpl",
	)
}

func templatesIndexTmpl() (*asset, error) {
	bytes, err := templatesIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tmpl", size: 20, mode: os.FileMode(420), modTime: time.Unix(1508289709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/application/application.tmpl": templatesApplicationApplicationTmpl,
	"templates/index.tmpl": templatesIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"application": &bintree{nil, map[string]*bintree{
			"application.tmpl": &bintree{templatesApplicationApplicationTmpl, map[string]*bintree{}},
		}},
		"index.tmpl": &bintree{templatesIndexTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

